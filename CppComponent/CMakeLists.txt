project(CppComponent)

# Default WinRT defines
add_definitions(-D_UNICODE -D _WINRT_DLL /EHsc)

# Sources
set(SOURCES pch.h pch.cpp			
			Class.idl Class.h Class.cpp 
			CppComponent.def)

# The module.g.cpp is generated by WinRT. We need to tell CMake that it is a generated file.	
# Replace CppComponent.dir with the target name.
# @todo Could not find a better way to get the binary directory
add_custom_command(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/CppComponent.dir/$<CONFIG>/Generated Files/module.g.cpp" COMMAND echo )
set(ADDITIONAL_FILES packages.config "${CMAKE_CURRENT_BINARY_DIR}/CppComponent.dir/$<CONFIG>/Generated Files/module.g.cpp")

# adds the library
add_library(CppComponent SHARED ${SOURCES} ${ADDITIONAL_FILES})

# Precompiled header options
target_compile_options(CppComponent PRIVATE "/Yupch.h")
target_compile_options(CppComponent PRIVATE "/Fp${CMAKE_CFG_INTDIR}/pch.pch")
set_source_files_properties(pch.cpp PROPERTIES COMPILE_FLAGS "/Ycpch.h")

# Import the properties of cppwinrt
set_target_properties(CppComponent PROPERTIES VS_PROJECT_IMPORT ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.CppWinRT/build/native/Microsoft.Windows.CppWinRT.props)
target_link_libraries(CppComponent PRIVATE ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.CppWinRT/build/native/Microsoft.Windows.CppWinRT.targets)

# Minimum windows 10 version : 1607
set_target_properties(CppComponent PROPERTIES VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION 10.0.14393.0)

set_target_properties(CppComponent PROPERTIES 
  CXX_STANDARD 17
  CXX_STANDARD_REQUIRED ON
  CXX_EXTENSIONS OFF
  # ----- C++/WinRT, Windows App SDK, and WinUI stuff starts here -----
  VS_GLOBAL_RootNamespace CppComponent
  VS_GLOBAL_AppContainerApplication false
  VS_GLOBAL_AppxPackage false
  #VS_GLOBAL_CppWinRTEnabled true    # Needs to be disabled
  VS_GLOBAL_CppWinRTOptimized true  
  VS_GLOBAL_CppWinRTRootNamespaceAutoMerge true
  VS_GLOBAL_UseWinUI false
  VS_GLOBAL_WindowsPackageType None
)

# Post-build : copies the target DLL output files to the distrib directory
add_custom_command(TARGET CppComponent POST_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_SOURCE_DIR}/distrib/)
add_custom_command(TARGET CppComponent POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:CppComponent> ${CMAKE_SOURCE_DIR}/distrib/)

